// src/flows/StepFlow.jsx

import React, { useState, createContext, useEffect, useContext } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import * as XLSX from 'xlsx';

import { EventContext } from '../contexts/EventContext';
import StepPage from '../components/StepPage';
import Step1    from '../screens/Step1';
import Step2    from '../screens/Step2';
import Step3    from '../screens/Step3';
import Step4    from '../screens/Step4';
import Step5    from '../screens/Step5';
import Step6    from '../screens/Step6';
import Step7    from '../screens/Step7';
import Step8    from '../screens/Step8';

export const StepContext = createContext();

// ---------- [Ï∂îÍ∞Ä] ÏñïÏùÄ ÎπÑÍµê Ìó¨Ìçº : Ïã§Ï†ú Î≥ÄÍ≤ΩÏù¥ ÏûàÏùÑ ÎïåÎßå setState ----------
const shallowEqualParticipants = (a = [], b = []) => {
  if (a === b) return true;
  if (!Array.isArray(a) || !Array.isArray(b)) return false;
  if (a.length !== b.length) return false;
  for (let i = 0; i < a.length; i += 1) {
    const x = a[i], y = b[i];
    if (!y) return false;
    if (
      x.id       !== y.id       ||
      x.group    !== y.group    ||
      x.nickname !== y.nickname ||
      x.handicap !== y.handicap ||
      x.score    !== y.score    ||
      x.room     !== y.room     ||
      x.partner  !== y.partner  ||
      x.selected !== y.selected
    ) return false;
  }
  return true;
};
// ---------------------------------------------------------------------------

export default function StepFlow() {
  const { eventId, eventData, updateEvent, updateEventImmediate } = useContext(EventContext);
  const { step }    = useParams();
  const navigate    = useNavigate();

  // 0) eventId ÏóÜÏúºÎ©¥ STEP0ÏúºÎ°ú Í∞ïÏ†ú Ïù¥Îèô
  useEffect(() => {
    if (!eventId) navigate('/admin/home/0', { replace: true });
  }, [eventId, navigate]);

  // 1) ÏÑúÎ≤Ñ Îç∞Ïù¥ÌÑ∞Î•º Î°úÏª¨ stateÏóê Ìï≠ÏÉÅ ÎèôÍ∏∞Ìôî
  const [mode, setMode]                 = useState('stroke');
  const [title, setTitle]               = useState('');
  const [roomCount, setRoomCount]       = useState(4);
  const [roomNames, setRoomNames]       = useState(Array(4).fill(''));
  const [uploadMethod, setUploadMethod] = useState('');
  const [participants, setParticipants] = useState([]);
  // ‚úÖ ÎÇ†Ïßú ÌïÑÎìú ÎèôÍ∏∞Ìôî Ï∂îÍ∞Ä(Í∏∞Ï°¥ Ïú†ÏßÄ)
  const [dateStart, setDateStart]       = useState('');
  const [dateEnd, setDateEnd]           = useState('');

  // ---------- [Î≥¥ÏôÑ] eventDataÍ∞Ä Î≥ÄÍ≤ΩÎê† Îïå "Ïã§Ï†úÎ°ú Îã¨ÎùºÏ°åÏùÑ ÎïåÎßå" setState ----------
  useEffect(() => {
    if (!eventData) return;

    // mode
    if (mode !== eventData.mode) setMode(eventData.mode);

    // title
    if (title !== eventData.title) setTitle(eventData.title);

    // roomCount
    const nextRoomCount = eventData.roomCount ?? 4;
    if (roomCount !== nextRoomCount) setRoomCount(nextRoomCount);

    // roomNames
    const nextRoomNames = eventData.roomNames || Array(nextRoomCount).fill('');
    if ((roomNames || []).join('|') !== (nextRoomNames || []).join('|')) {
      setRoomNames(nextRoomNames);
    }

    // uploadMethod
    if (uploadMethod !== eventData.uploadMethod) setUploadMethod(eventData.uploadMethod);

    // participants (ÏñïÏùÄ ÎπÑÍµê)
    const nextParticipants = eventData.participants || [];
    if (!shallowEqualParticipants(participants, nextParticipants)) {
      setParticipants(nextParticipants);
    }

    // dates
    const nextStart = eventData.dateStart || '';
    const nextEnd   = eventData.dateEnd   || '';
    if (dateStart !== nextStart) setDateStart(nextStart);
    if (dateEnd   !== nextEnd)   setDateEnd(nextEnd);
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [eventData]); // ÏùòÏ°¥ÏÑ±ÏùÄ Í∏∞Ï°¥Í≥º ÎèôÏùºÌïòÍ≤å eventData ÌïòÎÇòÎ°ú Ïú†ÏßÄ
  // ---------------------------------------------------------------------------

  // [COMPAT] Player/STEP8Ïù¥ ÏùΩÎäî Ïä§ÌÇ§ÎßàÎ°ú ÎèôÏãú Ï†ÄÏû•(dual write)
  const compatParticipant = (p) => ({
    ...p,
    roomNumber: p.room ?? null,          // Player/STEP8 Ìò∏Ìôò
    teammateId: p.partner ?? null,       // Player/STEP8 Ìò∏Ìôò
    teammate:   p.partner ?? null        // ÌòπÏãú teammate ÌÇ§Î•º Ïì∞Îäî ÏΩîÎìú ÎåÄÎπÑ
  });
  const buildRoomTable = (list=[]) => {
    // Î∞© Î≤àÌò∏ -> Ï∞∏Í∞ÄÏûê id Î∞∞Ïó¥(ÏµúÎåÄ 4Î™Ö) ÏòàÏãú ÌÖåÏù¥Î∏î
    const table = {};
    list.forEach(p => {
      const r = p.room ?? null;
      if (r == null) return;
      if (!table[r]) table[r] = [];
      table[r].push(p.id);
    });
    return table;
  };
  // [SCORE_SYNC] Î∞©Î≥Ñ Ï†êÏàò Î∞∞Ïó¥(ÏßëÍ≥ÑÏö© Î≥¥Ï°∞ ÌïÑÎìú, Ïïà Î≥¥Î©¥ Î¨¥ÏãúÎê®)
  const buildRoomScores = (list=[]) => {
    const scoreByRoom = {};
    list.forEach(p => {
      const r = p.room ?? null;
      if (r == null) return;
      if (!scoreByRoom[r]) scoreByRoom[r] = [];
      const v = Number(p.score);
      scoreByRoom[r].push(Number.isFinite(v) ? v : 0);
    });
    return scoreByRoom;
  };

  // Ï†ÄÏû• Ìó¨Ìçº: Ìï®Ïàò Í∞íÏùÑ Ï†úÍ±∞ÌïòÍ≥† ÏàúÏàò JSONÎßå Ï†ÑÎã¨
  // ‚òÖ patch-start: make save async and await remote write to ensure persistence before route changes
  const save = async (updates) => {
    const clean = {};
    Object.entries(updates).forEach(([key, value]) => {
      if (key === 'participants' && Array.isArray(value)) {
        // [COMPAT] participantsÎ•º Ìò∏ÌôòÌòïÏúºÎ°ú Î≥ÄÌôòÌï¥ÏÑú Ï†ÄÏû•
        const compat = value.map(item => {
          const base = {};
          Object.entries(item).forEach(([k, v]) => {
            if (typeof v !== 'function') base[k] = v;
          });
          return compatParticipant(base);
        });
        clean[key] = compat;
        // [COMPAT] Ï∞∏Í≥†Ïö© roomTableÎèÑ Í∞ôÏù¥ Ï†ÄÏû•(ÏùΩÏßÄ ÏïäÏúºÎ©¥ Î¨¥ÏãúÎê®)
        clean.roomTable   = buildRoomTable(compat);
        // [SCORE_SYNC] Ï∞∏Í≥†Ïö© Î∞©Î≥Ñ Ï†êÏàòÎèÑ Í∞ôÏù¥ Ï†ÄÏû•(ÏùΩÏßÄ ÏïäÏúºÎ©¥ Î¨¥ÏãúÎê®)
        clean.scoreByRoom = buildRoomScores(compat);
      } else if (typeof value !== 'function') {
        clean[key] = value;
      }
    });
    await (updateEventImmediate ? updateEventImmediate(clean) : updateEvent(clean));
  };
  // ‚òÖ patch-end

  // Ï†ÑÏ≤¥ Ï¥àÍ∏∞Ìôî (ÌòÑÏû¨ mode Ïú†ÏßÄ)
  const resetAll = () => {
    const init = {
      mode,
      title:        '',
      roomCount:    4,
      roomNames:    Array(4).fill(''),
      uploadMethod: '',
      participants: [],
      dateStart:    '',
      dateEnd:      ''
    };
    setMode(init.mode);
    setTitle(init.title);
    setRoomCount(init.roomCount);
    setRoomNames(init.roomNames);
    setUploadMethod(init.uploadMethod);
    setParticipants(init.participants);
    setDateStart(init.dateStart);
    setDateEnd(init.dateEnd);
    save(init);
    navigate('/admin/home/0', { replace: true });
  };

  // STEP ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò
  const curr       = Number(step) || 1;
  const strokeFlow = [1,2,3,4,5,6];
  const agmFlow    = [1,2,3,4,7,8];
  const flow       = mode === 'stroke' ? strokeFlow : agmFlow;

  const goNext = () => {
    // ‚úÖ ÎÇ†Ïßú Ìè¨Ìï® Ï†ÄÏû•
    save({ mode, title, roomCount, roomNames, uploadMethod, participants, dateStart, dateEnd });
    const idx  = flow.indexOf(curr);
    const next = flow[(idx + 1) % flow.length];
    navigate(`/admin/home/${next}`);
  };

  const goPrev = () => {
    save({ mode, title, roomCount, roomNames, uploadMethod, participants, dateStart, dateEnd });
    const idx  = flow.indexOf(curr);
    const prev = flow[(idx - 1 + flow.length) % flow.length];
    navigate(prev === 0 ? '/admin/home/0' : `/admin/home/${prev}`);
  };

  const setStep = n => navigate(`/admin/home/${n}`);

  // Î™®Îìú Î≥ÄÍ≤Ω & Ï†ÄÏû•
  const changeMode  = newMode => {
    setMode(newMode);
    save({ mode: newMode });
  };

  // ÎåÄÌöåÎ™Ö Î≥ÄÍ≤Ω & Ï†ÄÏû•
  const changeTitle = newTitle => {
    setTitle(newTitle);
    save({ title: newTitle });
  };

  // ÌååÏùº ÏóÖÎ°úÎìú Ï≤òÎ¶¨ (Step4 Îì±)
  const handleFile = async e => {
    const file = e.target.files?.[0];
    if (!file) return;
    const ab    = await file.arrayBuffer();
    const wb    = XLSX.read(ab, { type: 'array' });
    const sheet = wb.Sheets[wb.SheetNames[0]];
    const rows  = XLSX.utils.sheet_to_json(sheet, { header: 1 }).slice(1);
    const data  = rows.map((row, idx) => ({
      id:       idx,
      group:    Number(row[0]) || 1,
      nickname: String(row[1] || '').trim(),
      handicap: Number(row[2]) || 0,
      authCode: String(row[3] || '').trim(),
      score:    null,
      room:     null,
      partner:  null,
      selected: false
    }));
    setParticipants(data);
    save({ participants: data });
  };

  // Step5: ÏàòÎèô Ï¥àÍ∏∞Ìôî
  const initManual = () => {
    const data = Array.from({ length: roomCount * 4 }, (_, idx) => ({
      id:       idx,
      group:    1,
      nickname: '',
      handicap: 0,
      score:    null,
      room:     null,
      partner:  null,
      authCode: '',
      selected: false
    }));
    setParticipants(data);
    save({ participants: data });
  };

  // [ADD2] Í∑∏Î£π ÌåêÏ†ï Ìó¨Ìçº: group ÌïÑÎìú Ïö∞ÏÑ†, ÏóÜÏúºÎ©¥ id ÌôÄ/ÏßùÏúºÎ°ú Î≥¥Ï°∞
  const isGroup1 = (p) => {
    const g = Number(p?.group);
    if (Number.isFinite(g)) return (g % 2) === 1; // 1,3,5... => 1Ï°∞/Î¶¨Îçî
    return (Number(p?.id) % 2) === 1;
  };
  const isGroup2 = (p) => {
    const g = Number(p?.group);
    if (Number.isFinite(g)) return (g % 2) === 0; // 2,4,6... => 2Ï°∞/ÌååÌä∏ÎÑà
    return (Number(p?.id) % 2) === 0;
  };

  // üîπ Ï∂îÍ∞Ä: Îëê ÏÇ¨ÎûåÏùÑ **Ìïú Î≤àÏùò Ï†ÄÏû•ÏúºÎ°ú** Í∞ôÏùÄ Î∞©/ÏÉÅÌò∏ ÌååÌä∏ÎÑàÎ°ú ÌôïÏ†ïÌïòÎäî Ìó¨Ìçº
  const assignPairToRoom = (id1, id2, roomNo) => {
    updateParticipantsBulkNow([
      { id: id1, fields: { room: roomNo, partner: id2 } },
      { id: id2, fields: { room: roomNo, partner: id1 } },
    ]);
  };

  // Step7: AGM ÏàòÎèô Ìï†Îãπ
  const handleAgmManualAssign = async (id) => {
    let ps = [...participants];
    let roomNo, target, partner;

    target = ps.find(p => p.id === id);
    if (!target) return { roomNo: null, nickname: '', partnerNickname: null };

    // [ADD2] Í∑∏Î£π1(Î¶¨Îçî)Îßå Î≤ÑÌäºÏù¥ ÎÖ∏Ï∂úÎêòÎèÑÎ°ù UIÍ∞Ä Í±∏Îü¨Ï£ºÏßÄÎßå, Î°úÏßÅÎèÑ Í∑∏Î£πÏúºÎ°ú ÌåêÏ†ï
    if (!isGroup1(target)) {
      // Í∑∏Î£π2ÏóêÏÑúÎäî ÏïÑÎ¨¥ Í≤ÉÎèÑ ÌïòÏßÄ ÏïäÏùå(ÏïàÏ†ÑÏû•Ïπò)
      return { roomNo: target.room ?? null, nickname: target?.nickname || '', partnerNickname: target?.partner ? (ps.find(p=>p.id===target.partner)?.nickname || null) : null };
    }

    roomNo = target.room;
    if (roomNo == null) {
      // Í∞ôÏùÄ Í∑∏Î£π1Ïù¥ Ìïú Î∞©Ïóê ÏµúÎåÄ 2Î™Ö
      const countByRoom = ps
        .filter(p => isGroup1(p) && p.room != null)
        .reduce((acc, p) => { acc[p.room] = (acc[p.room]||0) + 1; return acc; }, {});
      const candidates = Array.from({ length: roomCount }, (_, i) => i+1)
        .filter(r => (countByRoom[r] || 0) < 2);
      roomNo = candidates.length ? candidates[Math.floor(Math.random() * candidates.length)] : null;
    }

    // Ïö∞ÏÑ† ÎåÄÏÉÅÏùò Î∞©Îßå ÌôïÏ†ï(ÌååÌä∏ÎÑàÎäî ÏïÑÏßÅ)
    ps = ps.map(p => p.id === id ? { ...p, room: roomNo } : p);

    // ÌååÌä∏ÎÑàÎäî Í∑∏Î£π2 Ï§ë ÎØ∏Î∞∞Ï†ïÏûêÏóêÏÑú ÏÑ†ÌÉù
    const pool2 = ps.filter(p => isGroup2(p) && p.room == null);
    partner = pool2.length ? pool2[Math.floor(Math.random() * pool2.length)] : null;

    if (partner && roomNo != null) {
      // [ADD2] Îëê ÏÇ¨ÎûåÏùÑ **ÎèôÏãúÏóê** ÌôïÏ†ï ‚Üí Ï†ÄÏû• Ìïú Î≤à
      assignPairToRoom(id, partner.id, roomNo);
      return { roomNo, nickname: target?.nickname || '', partnerNickname: partner?.nickname || null };
    }

    setParticipants(ps);
    await save({ participants: ps });
    return { roomNo, nickname: target?.nickname || '', partnerNickname: partner?.nickname || null };
  };

  // Step7: AGM ÏàòÎèô Ìï†Îãπ Ï∑®ÏÜå
  const handleAgmCancel = async (id) => {
    let ps = [...participants];
    const target = ps.find(p => p.id === id);
    if (target?.partner != null) {
      const pid = target.partner;
      ps = ps.map(p => (p.id === id || p.id === pid)
        ? { ...p, room: null, partner: null }
        : p
      );
    } else {
      ps = ps.map(p => p.id === id ? { ...p, room: null, partner: null } : p);
    }
    setParticipants(ps);
    await save({ participants: ps });
  };

  // Step8: AGM ÏûêÎèô Ìï†Îãπ
  const handleAgmAutoAssign = async () => {
    let ps = [...participants];
    const roomsArr = Array.from({ length: roomCount }, (_, i) => i+1);

    // 1) Í∑∏Î£π1(Î¶¨Îçî) Ï±ÑÏö∞Í∏∞: Î∞©Îãπ ÏµúÎåÄ 2Î™Ö
    roomsArr.forEach(roomNo => {
      const g1InRoom = ps.filter(p => isGroup1(p) && p.room === roomNo).length;
      const need = Math.max(0, 2 - g1InRoom);
      if (need <= 0) return;

      const freeG1 = ps.filter(p => isGroup1(p) && p.room == null);
      for (let i = 0; i < need && freeG1.length; i += 1) {
        const pick = freeG1.splice(Math.floor(Math.random() * freeG1.length), 1)[0];
        ps = ps.map(p => p.id === pick.id ? { ...p, room: roomNo, partner: null } : p);
      }
    });

    // 2) Í∑∏Î£π1ÎßàÎã§ Í∑∏Î£π2 ÌååÌä∏ÎÑà Ï±ÑÏö∞Í∏∞(ÎØ∏Î∞∞Ï†ï Í∑∏Î£π2ÏóêÏÑú)
    roomsArr.forEach(roomNo => {
      const freeG1 = ps.filter(p => isGroup1(p) && p.room === roomNo && p.partner == null);
      freeG1.forEach(p1 => {
        const freeG2 = ps.filter(p => isGroup2(p) && p.room == null);
        if (!freeG2.length) return;
        const pick = freeG2[Math.floor(Math.random() * freeG2.length)];
        ps = ps.map(p => {
          if (p.id === p1.id)   return { ...p, partner: pick.id };
          if (p.id === pick.id) return { ...p, room: roomNo, partner: p1.id };
          return p;
        });
      });
    });

    setParticipants(ps);
    const cleanList = ps.map(p => ({
      id: p.id, group: p.group, nickname: p.nickname, handicap: p.handicap,
      score: p.score, room: p.room, partner: p.partner, authCode: p.authCode, selected: p.selected
    }));
    await save({ participants: cleanList });
  };

  // Step8: AGM Î¶¨ÏÖã
  const handleAgmReset = async () => {
    // [FIX-SCORE-RESET] Î∞©/ÌååÌä∏ÎÑàÎøê ÏïÑÎãàÎùº scoreÎèÑ Ìï®Íªò nullÎ°ú Ï¥àÍ∏∞Ìôî
    const ps = participants.map(p => ({ ...p, room: null, partner: null, score: null }));
    setParticipants(ps);
    await save({ participants: ps });
  };

  // STEP5 Ïã§ÏãúÍ∞Ñ Ï†ÄÏû•Ïö©(Í∏∞Ï°¥ Ïú†ÏßÄ)
  const updateParticipantNow = async (id, fields) => {
    let next;
    setParticipants(prev => (next = prev.map(p => (p.id === id ? { ...p, ...fields } : p))));
    await save({ participants: next, dateStart, dateEnd });
  };
  const updateParticipantsBulkNow = async (changes) => {
    let next;
    const map = new Map(changes.map(c => [String(c.id), c.fields]));
    setParticipants(prev => (next = prev.map(p => (map.has(String(p.id)) ? { ...p, ...map.get(String(p.id)) } : p))));
    await save({ participants: next, dateStart, dateEnd });
  };

  const ctxValue = {
    onManualAssign: handleAgmManualAssign,
    onCancel:        handleAgmCancel,
    onAutoAssign:    handleAgmAutoAssign,
    onReset:         handleAgmReset,
    goNext, goPrev, setStep,
    setMode: changeMode,
    setTitle: changeTitle,
    mode, changeMode,
    title, changeTitle,
    roomCount, setRoomCount,
    roomNames, setRoomNames,
    uploadMethod, setUploadMethod,
    participants, setParticipants,
    resetAll, handleFile, initManual,
    updateParticipant:      updateParticipantNow,
    updateParticipantsBulk: updateParticipantsBulkNow,
    // ÎÇ†Ïßú stateÎèÑ ÎÖ∏Ï∂ú
    dateStart, setDateStart,
    dateEnd,   setDateEnd,
  };

  const pages = { 1:<Step1/>, 2:<Step2/>, 3:<Step3/>, 4:<Step4/>, 5:<Step5/>, 6:<Step6/>, 7:<Step7/>, 8:<Step8/> };
  const Current = pages[curr] || <Step1 />;

  return (
    <StepContext.Provider value={ctxValue}>
      <StepPage step={curr} setStep={setStep}>
        {Current}
      </StepPage>
    </StepContext.Provider>
  );
}

function shuffle(arr) { return [...arr].sort(() => Math.random() - 0.5); }
